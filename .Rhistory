ref_gene_path = '~/Documents/Paper3/Rcode/Rpackage/example/ref_gene.bed'
medip1_path = '~/Documents/Paper3/Rcode/Rpackage/example/brain_medip.bed'
medip2_path = '~/Documents/Paper3/Rcode/Rpackage/example/es_medip.bed'
mre1_path = '~/Documents/Paper3/Rcode/Rpackage/example/brain_mre.bed'
mre2_path = '~/Documents/Paper3/Rcode/Rpackage/example/es_mre.bed'
n_cluster = 8000
ref_gene_path = '~/Documents/Paper3/Rcode/Rpackage/example/ref_gene.bed'
medip1_path = '~/Documents/Paper3/Rcode/Rpackage/example/brain_medip.bed'
medip2_path = '~/Documents/Paper3/Rcode/Rpackage/example/es_medip.bed'
mre1_path = '~/Documents/Paper3/Rcode/Rpackage/example/brain_mre.bed'
mre2_path = '~/Documents/Paper3/Rcode/Rpackage/example/es_mre.bed'
dt = load_data(ref_gene_path, medip1_path, medip2_path, mre1_path, mre2_path)
library(LISdmr)
dt = load_data(ref_gene_path, medip1_path, medip2_path, mre1_path, mre2_path)
head(cpgi)
load("~/Documents/Paper3/Rcode/Rpackage/LISdmr/R/sysdata.rda")
View(cpgi)
cpgi = read.table('~/Documents/Paper3/Rcode/Rpackage/example/genFeature/cpgi.bed')
devtools::use_data(cpgi, cpgi, internal = TRUE)
exon = read.table('~/Documents/Paper3/Rcode/Rpackage/example/genFeature/exon.bed')
devtools::use_data(exon, exon, internal = TRUE)
intron = read.table('~/Documents/Paper3/Rcode/Rpackage/example/genFeature/intron.bed')
devtools::use_data(intron, intron, internal = TRUE)
utr3 = read.table('~/Documents/Paper3/Rcode/Rpackage/example/genFeature/utr3.bed')
devtools::use_data(utr3, utr3, internal = TRUE)
utr5 = read.table('~/Documents/Paper3/Rcode/Rpackage/example/genFeature/utr5.bed')
devtools::use_data(utr5, utr5, internal = TRUE)
rmsk_DNA = read.table('~/Documents/Paper3/Rcode/Rpackage/example/genFeature/rmsk_DNA.bed')
devtools::use_data(rmsk_DNA, rmsk_DNA, internal = TRUE)
rmsk_LINE = read.table('~/Documents/Paper3/Rcode/Rpackage/example/genFeature/rmsk_LINE.bed')
devtools::use_data(rmsk_LINE, rmsk_LINE, internal = TRUE)
rmsk_LowSimple = read.table('~/Documents/Paper3/Rcode/Rpackage/example/genFeature/rmsk_LowSimple.bed')
devtools::use_data(rmsk_LowSimple, rmsk_LowSimple, internal = TRUE)
rmsk_SINE = read.table('~/Documents/Paper3/Rcode/Rpackage/example/genFeature/rmsk_SINE.bed')
devtools::use_data(rmsk_SINE, rmsk_SINE, internal = TRUE)
rmsk_other = read.table('~/Documents/Paper3/Rcode/Rpackage/example/genFeature/rmsk_other.bed')
devtools::use_data(rmsk_other, rmsk_other, internal = TRUE)
library(LISdmr)
library(LISdmr)
head(cpgi)
head(exon)
head(intron)
load("~/Documents/Paper3/Rcode/Rpackage/LISdmr/R/sysdata.rda")
cpgi = read.table('~/Documents/Paper3/Rcode/Rpackage/example/genFeature/cpgi.bed')
exon = read.table('~/Documents/Paper3/Rcode/Rpackage/example/genFeature/exon.bed')
intron = read.table('~/Documents/Paper3/Rcode/Rpackage/example/genFeature/intron.bed')
utr3 = read.table('~/Documents/Paper3/Rcode/Rpackage/example/genFeature/utr3.bed')
utr5 = read.table('~/Documents/Paper3/Rcode/Rpackage/example/genFeature/utr5.bed')
rmsk_DNA = read.table('~/Documents/Paper3/Rcode/Rpackage/example/genFeature/rmsk_DNA.bed')
rmsk_LINE = read.table('~/Documents/Paper3/Rcode/Rpackage/example/genFeature/rmsk_LINE.bed')
rmsk_LowSimple = read.table('~/Documents/Paper3/Rcode/Rpackage/example/genFeature/rmsk_LowSimple.bed')
rmsk_SINE = read.table('~/Documents/Paper3/Rcode/Rpackage/example/genFeature/rmsk_SINE.bed')
rmsk_other = read.table('~/Documents/Paper3/Rcode/Rpackage/example/genFeature/rmsk_other.bed')
genFeatures = list(cpgi,exon,intron,utr3,utr5,rmsk_DNA,rmsk_LINE,rmsk_LowSimple,rmsk_SINE,rmsk_other)
devtools::use_data(genFeatures, genFeatures, internal = TRUE)
devtools::use_data(genFeatures, genFeatures, internal = TRUE, overwrite = TRUE)
ref_gene_path = '~/Documents/Paper3/Rcode/Rpackage/example/ref_gene.bed'
medip1_path = '~/Documents/Paper3/Rcode/Rpackage/example/brain_medip.bed'
medip2_path = '~/Documents/Paper3/Rcode/Rpackage/example/es_medip.bed'
mre1_path = '~/Documents/Paper3/Rcode/Rpackage/example/brain_mre.bed'
mre2_path = '~/Documents/Paper3/Rcode/Rpackage/example/es_mre.bed'
n_cluster = 8000
all = read.table(ref_gene_path, header = F)
colnames(all) = c('chr', 'start', 'end')
gr_ref_gene = GenomicRanges::GRanges(all[,1], ranges = IRanges::IRanges(start = all[,2], end = all[,3]))
data_paths = c(medip1_path, medip2_path, mre1_path, mre2_path)
names = c('medip1', 'medip2', 'mre1', 'mre2')
for(i in 1:4) {
raw_data = read.table(data_paths[i], header = F)
if (i < 3) {
gr_raw_data = GenomicRanges::GRanges(raw_data[,1], ranges = IRanges::IRanges(
start = raw_data[,2], end = raw_data[,3]))
} else {
gr_raw_data = GenomicRanges::GRanges(raw_data[,1], ranges = IRanges::IRanges(
start = raw_data[,2], end = raw_data[,2] + 2))
}
count = GenomicRanges::countOverlaps(gr_ref_gene, gr_raw_data)
all[,names[i]] = count
}
for(window_size in c(1,10,50,200,1000)) {
medip1 = local_smooth(all$medip1, window_size)
medip2 = local_smooth(all$medip2, window_size)
mre1 = local_smooth(all$mre1, window_size)
mre2 = local_smooth(all$mre2, window_size)
medip1 = medip1 / quantile(medip1[which(medip1>0)], 0.75) * 10
medip2 = medip2 / quantile(medip2[which(medip2>0)], 0.75) * 10
mre1 = mre1 / quantile(mre1[which(mre1>0)], 0.75) * 10
mre2 = mre2 / quantile(mre2[which(mre2>0)], 0.75) * 10
ratio_medip = abs(medip1 - medip2) / min(medip1 + 1, medip2 + 1)
ratio_mre = abs(mre1 - mre2) / min(mre1 + 1, mre2 + 1)
dif_combine = abs((medip1+1)*(mre2+1) - (medip2+1)*(mre1+1))
ratio_medip = infotheo::discretize(ratio_medip, disc = 'equalfreq', nbins = n_cluster)
ratio_mre = infotheo::discretize(ratio_mre, disc = 'equalfreq', nbins = n_cluster)
dif_combine = infotheo::discretize(dif_combine, disc = 'equalfreq', nbins = n_cluster)
all[,paste('ratio_medip_', window_size, sep='')] = ratio_medip
all[,paste('ratio_mre_', window_size, sep='')] = ratio_mre
all[,paste('dif_combine_', window_size, sep='')] = dif_combine
}
all[,'dist'] = all$start - c(all$start[1], all$start[1:nrow(all)-1])
all[,'dist'] = infotheo::discretize(all$dist, disc = 'equalfreq', nbins = n_cluster)
names = c('cpgi', 'exon', 'intron', 'utr3', 'utr5', 'rmsk_DNA', 'rmsk_LINE', 'rmsk_LowSimple', 'rmsk_SINE', 'rmsk_other')
for(i in 1:10) {
gr_genFeature = GenomicRanges::GRanges(genFeature[[i]][,1], ranges = IRanges::IRanges(
start = genFeature[[i]][,2], end = genFeature[[i]][,3]))
count = GenomicRanges::countOverlaps(gr_ref_gene, gr_genFeature)
all[,names[i]] = count
}
for(i in 1:10) {
gr_genFeature = GenomicRanges::GRanges(genFeatures[[i]][,1], ranges = IRanges::IRanges(
start = genFeatures[[i]][,2], end = genFeatures[[i]][,3]))
count = GenomicRanges::countOverlaps(gr_ref_gene, gr_genFeature)
all[,names[i]] = count
}
head(all)
library(LISdmr)
str(genFeatures)
ref_gene_path = '~/Documents/Paper3/Rcode/Rpackage/example/ref_gene.bed'
medip1_path = '~/Documents/Paper3/Rcode/Rpackage/example/brain_medip.bed'
medip2_path = '~/Documents/Paper3/Rcode/Rpackage/example/es_medip.bed'
mre1_path = '~/Documents/Paper3/Rcode/Rpackage/example/brain_mre.bed'
mre2_path = '~/Documents/Paper3/Rcode/Rpackage/example/es_mre.bed'
dt = load_data(ref_gene_path, medip1_path, medip2_path, mre1_path, mre2_path)
train_path = '~/Documents/Paper3/Rcode/Rpackage/example/train_gene.bed'
train(dt, train_path, c = 0.1, e = 0.005)
write.table(dt[,8:34], '/tmp/LISdmr/test_dt', quote = F, sep = "\t", col.names = F, row.names = F)
colnames(dt[,8:33])
write.table(dt[,8:33], '/tmp/LISdmr/test_dt', quote = F, sep = "\t", col.names = F, row.names = F)
system('./src/crfpp/crf_test -v2 -m /tmp/LISdmr/model /tmp/LISdmr/test_dt > /tmp/LISdmr/prediction')
result = read.table('/tmp/LISdmr/prediction')
head(result)
prob0 = result[,ncol(result)-1]
prob0 = as.character(prob0)
prob0 = as.numeric(substr(prob0,3,10))
head(prob0)
head(dt)
res = dt[,1:3]
res = dt[,1:7]
head(res)
LIS_rejection <- function(lis, alpha = 0.01) {
m=length(lis)
sort_lis<-sort(lis)
if (min(alpha) > alpha)
{
res = rep(0, m)
}
else
{
k = 1
while(k<m && (1/k)*sum(sort_lis[1:k]) < alpha){
k = k + 1
}
threshold = sort_lis[k - 1]
rej_id = which(lis < threshold)
res = rep(0, m)
res[rej_id] = 1
}
return (res)
}
lis_rejection <- function(lis, alpha = 0.01) {
m=length(lis)
sort_lis<-sort(lis)
if (min(alpha) > alpha)
{
res = rep(0, m)
}
else
{
k = 1
while(k<m && (1/k)*sum(sort_lis[1:k]) < alpha){
k = k + 1
}
threshold = sort_lis[k - 1]
rej_id = which(lis < threshold)
res = rep(0, m)
res[rej_id] = 1
}
return (res)
}
alpha = 0.01
DMC = lis_rejection(prob0, alpha)
head(DMC)
mean(DMC)
DMC
res = dt[,1:7]
head(res)
res[,'DMC'] = DMC
head(res)
1 %in% c(1,2,3)
'q' %in% c('q',2,3)
!('DMC' %in% colnames(dt))
dt_ref = dt
dt = res
(!('DMC' %in% colnames(dt)))
devtools::use_package('DSS')
library(DSS)
tmp_all <- dt[,c('chr','start')]
tmp_all[,'mu1'] = 0
tmp_all[,'mu2'] = 0
tmp_all[,'diff'] = 0
tmp_all[,'diff.se'] = 0
tmp_all[,'stat'] = 0
tmp_all[,'phi1'] = 0
tmp_all[,'phi2'] = 0
tmp_all[,'pval'] = 1 - dt$DMC
tmp_all[,'fdr'] = 0
colnames(tmp_all)[2] = 'pos'
DMR = callDMR(tmp_all, delta=0, p.threshold=0.01, minlen = 300, pct.sig = 0.7, minCG = 10)
head(DMR)
?callDMR
dim(DMR)
DMR
library(LISdmr)
ref_gene_path = '~/Documents/Paper3/Rcode/Rpackage/example/ref_gene.bed'
medip1_path = '~/Documents/Paper3/Rcode/Rpackage/example/brain_medip.bed'
medip2_path = '~/Documents/Paper3/Rcode/Rpackage/example/es_medip.bed'
mre1_path = '~/Documents/Paper3/Rcode/Rpackage/example/brain_mre.bed'
mre2_path = '~/Documents/Paper3/Rcode/Rpackage/example/es_mre.bed'
dt = load_data(ref_gene_path, medip1_path, medip2_path, mre1_path, mre2_path)
train_path = '~/Documents/Paper3/Rcode/Rpackage/example/train_gene.bed'
train(dt, train_path, c = 0.1, e = 0.005)
head(dt)
res_DMC = get_DMC(dt, alpha = 0.01)
head(res_DMC)
res_DMR = get_DMR(res_DMC)
head(res_DMR)
res_DMR
library(LISdmr)
library(LISdmr)
library(LISdmr)
?callDMR
library(LISdmr)
?callDMR
library(LISdmr)
library(LISdmr)
?callDMR
library(LISdmr)
library(LISdmr)
library(LISdmr)
library(LISdmr)
system.file("extdata", package = "LISdmr")
filepath <- datafile[1]
getwd()
system.file("crfpp", package = "LISdmr")
system.file("src", package = "LISdmr")
system.file("extdata", package = "LISdmr")
filedir = system.file("extdata", package = "LISdmr")
filedir = system.file("extdata", package = "LISdmr")
ref_gene_path = paste(filedir, '/ref_gene.bed', sep = '')
medip1_path = paste(filedir, '/brain_medip.bed', sep = '')
medip2_path = paste(filedir, '/es_medip.bed', sep = '')
mre1_path = paste(filedir, '/brain_mre.bed', sep = '')
mre2_path = paste(filedir, '/es_mre.bed', sep = '')
dt = load_data(ref_gene_path, medip1_path, medip2_path, mre1_path, mre2_path)
filedir = system.file("extdata", package = "LISdmr")
ref_gene_path = paste(filedir, '/ref_gene.bed', sep = '')
medip1_path = paste(filedir, '/brain_medip.bed', sep = '')
medip2_path = paste(filedir, '/es_medip.bed', sep = '')
mre1_path = paste(filedir, '/brain_mre.bed', sep = '')
mre2_path = paste(filedir, '/es_mre.bed', sep = '')
dt = load_data(ref_gene_path, medip1_path, medip2_path, mre1_path, mre2_path)
head(dt)
train_path = '~/Documents/Paper3/Rcode/Rpackage/example/train_gene.bed'
train(dt, train_path, c = 0.1, e = 0.005)
res_DMC = get_DMC(dt, alpha = 0.01)
res_DMR = get_DMR(res_DMC)
head(res_DMC)
res_DMR
system.file(package = "LISdmr")
package_dir = system.file(package = "LISdmr")
commend = paste(package_dir, '/src/crfpp/crf_learn -c ', c, ' -e ', e, ' ', package_dir, '/src/crfpp/template/template1 /tmp/LISdmr/train_dt /tmp/LISdmr/model', sep = '')
c = 0.1
e = 0.005
commend = paste(package_dir, '/src/crfpp/crf_learn -c ', c, ' -e ', e, ' ', package_dir, '/src/crfpp/template/template1 /tmp/LISdmr/train_dt /tmp/LISdmr/model', sep = '')
system(commend)
system('ls /Library/Frameworks/R.framework/Versions/3.3/Resources/library/LISdmr/')
commend = paste('./src/crfpp/crf_learn -c ', c, ' -e ', e, ' ./src/crfpp/template/template1 /tmp/LISdmr/train_dt /tmp/LISdmr/model', sep = '')
system(commend)
train_path = paste(filedir, '/train_gene.bed', sep = '')
train(dt, train_path, c = 0.1, e = 0.005)
library(LISdmr)
filedir = system.file("extdata", package = "LISdmr")
ref_gene_path = paste(filedir, '/ref_gene.bed', sep = '')
medip1_path = paste(filedir, '/brain_medip.bed', sep = '')
medip2_path = paste(filedir, '/es_medip.bed', sep = '')
mre1_path = paste(filedir, '/brain_mre.bed', sep = '')
mre2_path = paste(filedir, '/es_mre.bed', sep = '')
dt = load_data(ref_gene_path, medip1_path, medip2_path, mre1_path, mre2_path)
package_dir = system.file(package = "LISdmr")
package_dir
system('ls /Library/Frameworks/R.framework/Versions/3.3/Resources/library/LISdmr')
commend = paste(package_dir, '/src/crfpp/crf_learn -c ', c, ' -e ', e, ' ', package_dir, '/src/crfpp/template/template1 /tmp/LISdmr/train_dt /tmp/LISdmr/model', sep = '')
commend
system(commend)
library(LISdmr)
filedir = system.file("extdata", package = "LISdmr")
ref_gene_path = paste(filedir, '/ref_gene.bed', sep = '')
medip1_path = paste(filedir, '/brain_medip.bed', sep = '')
medip2_path = paste(filedir, '/es_medip.bed', sep = '')
mre1_path = paste(filedir, '/brain_mre.bed', sep = '')
mre2_path = paste(filedir, '/es_mre.bed', sep = '')
dt = load_data(ref_gene_path, medip1_path, medip2_path, mre1_path, mre2_path)
train_path = paste(filedir, '/train_gene.bed', sep = '')
train(dt, train_path, c = 0.1, e = 0.005)
res_DMC = get_DMC(dt, alpha = 0.01)
res_DMR = get_DMR(res_DMC)
package_dir = system.file(package = "LISdmr")
commend = paste(package_dir, '/src/crfpp/crf_test -v2 -m /tmp/LISdmr/model /tmp/LISdmr/test_dt > /tmp/LISdmr/prediction', sep = '')
system(commend)
library(LISdmr)
filedir = system.file("extdata", package = "LISdmr")
ref_gene_path = paste(filedir, '/ref_gene.bed', sep = '')
medip1_path = paste(filedir, '/brain_medip.bed', sep = '')
medip2_path = paste(filedir, '/es_medip.bed', sep = '')
mre1_path = paste(filedir, '/brain_mre.bed', sep = '')
mre2_path = paste(filedir, '/es_mre.bed', sep = '')
dt = load_data(ref_gene_path, medip1_path, medip2_path, mre1_path, mre2_path)
train_path = paste(filedir, '/train_gene.bed', sep = '')
train(dt, train_path, c = 0.1, e = 0.005)
res_DMC = get_DMC(dt, alpha = 0.01)
res_DMR = get_DMR(res_DMC)
head(res_DMC)
head(res_DMR)
